#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
    }
    defaultPrim = "quadruped_robot"
    doc = """Generated from Composed Stage of root layer /home/gpuuser/GitHub/Intelligent-robot-design/generations/generation_1/robot_4.usda
"""
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "quadruped_robot"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
    }

    def Xform "base" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.0031875202)
        float3 physics:diagonalInertia = (0.00000536624, 0.00000536624, 0.000008524004)
        float physics:mass = 0.5114403
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physxArticulation:enabledSelfCollisions = 1
        int physxArticulation:solverPositionIterationCount = 32
        int physxArticulation:solverVelocityIterationCount = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "floating_base"
        {
            rel physics:body0 = </quadruped_robot/base>
            rel physics:body1 = </quadruped_robot/trunk>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "trunk" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.11579261)
        float3 physics:diagonalInertia = (0.045265224, 0.045265224, 0.19313139)
        float physics:mass = 1.3411031
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.58556944, -0.2985574, -0.12809524), (0.58556944, 0.2985574, 0.12809524)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1.171138882637024, 0.5971148014068604, 0.2561904788017273)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.58556944, -0.2985574, -0.12809524), (0.58556944, 0.2985574, 0.12809524)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1.171138882637024, 0.5971148014068604, 0.2561904788017273)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.58556944, 0.2985574, -0.102476195)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "FR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.58556944, -0.2985574, -0.102476195)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.58556944, 0.2985574, -0.102476195)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.58556944, -0.2985574, -0.102476195)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10155067)
        float3 physics:diagonalInertia = (0.008058391, 0.008058391, 0.008058391)
        float physics:mass = 1.9535419
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, 0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10155067, -0.10155067, -0.10155067), (0.10155067, 0.10155067, 0.10155067)]
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10155067, -0.10155067, -0.10155067), (0.10155067, 0.10155067, 0.10155067)]
            uniform token purpose = "guide"
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_hip>
            rel physics:body1 = </quadruped_robot/FL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.13574919)
        float3 physics:diagonalInertia = (0.016595822, 0.016595822, 0.0053200237)
        float physics:mass = 1.0317583
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, 0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10155067, -0.10155067, -0.21712251), (0.10155067, 0.10155067, 0.21712251)]
            double height = 0.4342450201511383
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.21712251007556915)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10155067, -0.10155067, -0.21712251), (0.10155067, 0.10155067, 0.21712251)]
            double height = 0.4342450201511383
            uniform token purpose = "guide"
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.21712251007556915)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_thigh>
            rel physics:body1 = </quadruped_robot/FL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.43424502)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108468994)
        float3 physics:diagonalInertia = (0.007107631, 0.007107631, 0.007107631)
        float physics:mass = 1.5102668
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, 0.2985574007034302, -0.5367212295532227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108468994, -0.108468994, -0.108468994), (0.108468994, 0.108468994, 0.108468994)]
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108468994, -0.108468994, -0.108468994), (0.108468994, 0.108468994, 0.108468994)]
            uniform token purpose = "guide"
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_knee>
            rel physics:body1 = </quadruped_robot/FL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.45088857)
        float3 physics:diagonalInertia = (0.029277124, 0.029277124, 0.010932596)
        float physics:mass = 1.8584125
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, 0.2985574007034302, -0.5367212295532227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108468994, -0.108468994, -0.2680683), (0.108468994, 0.108468994, 0.2680683)]
            double height = 0.5361366271972656
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2680683135986328)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108468994, -0.108468994, -0.2680683), (0.108468994, 0.108468994, 0.2680683)]
            double height = 0.5361366271972656
            uniform token purpose = "guide"
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2680683135986328)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_calf>
            rel physics:body1 = </quadruped_robot/FL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5361366)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.06163756)
        float3 physics:diagonalInertia = (0.0027935004, 0.0027935004, 0.0027935004)
        float physics:mass = 1.8382215
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, 0.2985574007034302, -1.0728578567504883)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            uniform token purpose = "guide"
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10155067)
        float3 physics:diagonalInertia = (0.0058328477, 0.0058328477, 0.0058328477)
        float physics:mass = 1.4140183
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, -0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10155067, -0.10155067, -0.10155067), (0.10155067, 0.10155067, 0.10155067)]
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10155067, -0.10155067, -0.10155067), (0.10155067, 0.10155067, 0.10155067)]
            uniform token purpose = "guide"
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_hip>
            rel physics:body1 = </quadruped_robot/FR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.045468375)
        float3 physics:diagonalInertia = (0.014555801, 0.014555801, 0.0088606095)
        float physics:mass = 1.7184147
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, -0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10155067, -0.10155067, -0.21712251), (0.10155067, 0.10155067, 0.21712251)]
            double height = 0.4342450201511383
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.21712251007556915)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10155067, -0.10155067, -0.21712251), (0.10155067, 0.10155067, 0.21712251)]
            double height = 0.4342450201511383
            uniform token purpose = "guide"
            double radius = 0.10155066847801208
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.21712251007556915)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_thigh>
            rel physics:body1 = </quadruped_robot/FR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.43424502)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108468994)
        float3 physics:diagonalInertia = (0.0071806195, 0.0071806195, 0.0071806195)
        float physics:mass = 1.5257758
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, -0.2985574007034302, -0.5367212295532227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108468994, -0.108468994, -0.108468994), (0.108468994, 0.108468994, 0.108468994)]
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108468994, -0.108468994, -0.108468994), (0.108468994, 0.108468994, 0.108468994)]
            uniform token purpose = "guide"
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_knee>
            rel physics:body1 = </quadruped_robot/FR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.39314425)
        float3 physics:diagonalInertia = (0.026186554, 0.026186554, 0.0071055084)
        float physics:mass = 1.2078526
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, -0.2985574007034302, -0.5367212295532227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108468994, -0.108468994, -0.2680683), (0.108468994, 0.108468994, 0.2680683)]
            double height = 0.5361366271972656
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2680683135986328)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108468994, -0.108468994, -0.2680683), (0.108468994, 0.108468994, 0.2680683)]
            double height = 0.5361366271972656
            uniform token purpose = "guide"
            double radius = 0.10846899449825287
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2680683135986328)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_calf>
            rel physics:body1 = </quadruped_robot/FR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5361366)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.06163756)
        float3 physics:diagonalInertia = (0.0016680222, 0.0016680222, 0.0016680222)
        float physics:mass = 1.0976173
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.585569441318512, -0.2985574007034302, -1.0728578567504883)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            uniform token purpose = "guide"
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08661368)
        float3 physics:diagonalInertia = (0.005868843, 0.005868843, 0.005868843)
        float physics:mass = 1.955778
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, 0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08661368, -0.08661368, -0.08661368), (0.08661368, 0.08661368, 0.08661368)]
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08661368, -0.08661368, -0.08661368), (0.08661368, 0.08661368, 0.08661368)]
            uniform token purpose = "guide"
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_hip>
            rel physics:body1 = </quadruped_robot/RL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.010884835)
        float3 physics:diagonalInertia = (0.0063381516, 0.0063381516, 0.006022573)
        float physics:mass = 1.6056066
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, 0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08661368, -0.08661368, -0.2909814), (0.08661368, 0.08661368, 0.2909814)]
            double height = 0.5819628238677979
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2909814119338989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08661368, -0.08661368, -0.2909814), (0.08661368, 0.08661368, 0.2909814)]
            double height = 0.5819628238677979
            uniform token purpose = "guide"
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2909814119338989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_thigh>
            rel physics:body1 = </quadruped_robot/RL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5819628)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08805366)
        float3 physics:diagonalInertia = (0.0041856505, 0.0041856505, 0.0041856505)
        float physics:mass = 1.3496096
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, 0.2985574007034302, -0.6844390034675598)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08805366, -0.08805366, -0.08805366), (0.08805366, 0.08805366, 0.08805366)]
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08805366, -0.08805366, -0.08805366), (0.08805366, 0.08805366, 0.08805366)]
            uniform token purpose = "guide"
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_knee>
            rel physics:body1 = </quadruped_robot/RL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.26476437)
        float3 physics:diagonalInertia = (0.021053907, 0.021053907, 0.0033354843)
        float physics:mass = 0.8603875
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, 0.2985574007034302, -0.6844390034675598)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08805366, -0.08805366, -0.26003474), (0.08805366, 0.08805366, 0.26003474)]
            double height = 0.5200694799423218
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2600347399711609)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08805366, -0.08805366, -0.26003474), (0.08805366, 0.08805366, 0.26003474)]
            double height = 0.5200694799423218
            uniform token purpose = "guide"
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2600347399711609)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_calf>
            rel physics:body1 = </quadruped_robot/RL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5200695)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.06163756)
        float3 physics:diagonalInertia = (0.0029340433, 0.0029340433, 0.0029340433)
        float physics:mass = 1.9307038
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, 0.2985574007034302, -1.2045085430145264)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            uniform token purpose = "guide"
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08661368)
        float3 physics:diagonalInertia = (0.005655894, 0.005655894, 0.005655894)
        float physics:mass = 1.8848133
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, -0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08661368, -0.08661368, -0.08661368), (0.08661368, 0.08661368, 0.08661368)]
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08661368, -0.08661368, -0.08661368), (0.08661368, 0.08661368, 0.08661368)]
            uniform token purpose = "guide"
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_hip>
            rel physics:body1 = </quadruped_robot/RR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.3403523)
        float3 physics:diagonalInertia = (0.04252469, 0.04252469, 0.005446512)
        float physics:mass = 1.4520297
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, -0.2985574007034302, -0.10247619450092316)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08661368, -0.08661368, -0.2909814), (0.08661368, 0.08661368, 0.2909814)]
            double height = 0.5819628238677979
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2909814119338989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08661368, -0.08661368, -0.2909814), (0.08661368, 0.08661368, 0.2909814)]
            double height = 0.5819628238677979
            uniform token purpose = "guide"
            double radius = 0.08661367744207382
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2909814119338989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_thigh>
            rel physics:body1 = </quadruped_robot/RR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5819628)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08805366)
        float3 physics:diagonalInertia = (0.0033231645, 0.0033231645, 0.0033231645)
        float physics:mass = 1.071512
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, -0.2985574007034302, -0.6844390034675598)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08805366, -0.08805366, -0.08805366), (0.08805366, 0.08805366, 0.08805366)]
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08805366, -0.08805366, -0.08805366), (0.08805366, 0.08805366, 0.08805366)]
            uniform token purpose = "guide"
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_knee>
            rel physics:body1 = </quadruped_robot/RR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.47750142)
        float3 physics:diagonalInertia = (0.013327798, 0.013327798, 0.0059294687)
        float physics:mass = 1.5295053
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, -0.2985574007034302, -0.6844390034675598)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08805366, -0.08805366, -0.26003474), (0.08805366, 0.08805366, 0.26003474)]
            double height = 0.5200694799423218
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2600347399711609)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08805366, -0.08805366, -0.26003474), (0.08805366, 0.08805366, 0.26003474)]
            double height = 0.5200694799423218
            uniform token purpose = "guide"
            double radius = 0.08805365860462189
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2600347399711609)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_calf>
            rel physics:body1 = </quadruped_robot/RR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5200695)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.06163756)
        float3 physics:diagonalInertia = (0.0020836422, 0.0020836422, 0.0020836422)
        float physics:mass = 1.3711098
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.585569441318512, -0.2985574007034302, -1.2045085430145264)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.06163756, -0.06163756, -0.06163756), (0.06163756, 0.06163756, 0.06163756)]
            uniform token purpose = "guide"
            double radius = 0.06163756176829338
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

