#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
    }
    defaultPrim = "quadruped_robot"
    doc = """Generated from Composed Stage of root layer /home/gpuuser/GitHub/Intelligent-robot-design/generations/generation_0/robot_10.usda
"""
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "quadruped_robot"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
    }

    def Xform "base" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.0016680334)
        float3 physics:diagonalInertia = (0.000011892254, 0.000011892254, 0.000022933045)
        float physics:mass = 1.3759828
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physxArticulation:enabledSelfCollisions = 1
        int physxArticulation:solverPositionIterationCount = 32
        int physxArticulation:solverVelocityIterationCount = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "floating_base"
        {
            rel physics:body0 = </quadruped_robot/base>
            rel physics:body1 = </quadruped_robot/trunk>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "trunk" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.059346277)
        float3 physics:diagonalInertia = (0.041765187, 0.041765187, 0.16133279)
        float physics:mass = 1.5273218
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.48643184, -0.28333294, -0.118856125), (0.48643184, 0.28333294, 0.118856125)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.9728636741638184, 0.5666658878326416, 0.23771224915981293)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.48643184, -0.28333294, -0.118856125), (0.48643184, 0.28333294, 0.118856125)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.9728636741638184, 0.5666658878326416, 0.23771224915981293)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.48643184, 0.28333294, -0.0950849)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "FR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.48643184, -0.28333294, -0.0950849)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.48643184, 0.28333294, -0.0950849)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.48643184, -0.28333294, -0.0950849)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10132902)
        float3 physics:diagonalInertia = (0.005892863, 0.005892863, 0.005892863)
        float physics:mass = 1.4348241
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, 0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_hip>
            rel physics:body1 = </quadruped_robot/FL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.43597266)
        float3 physics:diagonalInertia = (0.023482684, 0.023482684, 0.0074408064)
        float physics:mass = 1.4493803
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, 0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10132902, -0.10132902, -0.26489863), (0.10132902, 0.10132902, 0.26489863)]
            double height = 0.5297972559928894
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2648986279964447)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10132902, -0.10132902, -0.26489863), (0.10132902, 0.10132902, 0.26489863)]
            double height = 0.5297972559928894
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2648986279964447)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_thigh>
            rel physics:body1 = </quadruped_robot/FL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.52979726)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10132902)
        float3 physics:diagonalInertia = (0.0036691697, 0.0036691697, 0.0036691697)
        float physics:mass = 0.8933881
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, 0.2833329439163208, -0.624882161617279)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_knee>
            rel physics:body1 = </quadruped_robot/FL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.2441755)
        float3 physics:diagonalInertia = (0.055113096, 0.055113096, 0.0072631766)
        float physics:mass = 1.8336617
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, 0.2833329439163208, -0.624882161617279)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08900588, -0.08900588, -0.2945608), (0.08900588, 0.08900588, 0.2945608)]
            double height = 0.5891215801239014
            double radius = 0.08900588005781174
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2945607900619507)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08900588, -0.08900588, -0.2945608), (0.08900588, 0.08900588, 0.2945608)]
            double height = 0.5891215801239014
            uniform token purpose = "guide"
            double radius = 0.08900588005781174
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2945607900619507)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_calf>
            rel physics:body1 = </quadruped_robot/FL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5891216)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.062304113)
        float3 physics:diagonalInertia = (0.0019992425, 0.0019992425, 0.0019992425)
        float physics:mass = 1.2875735
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, 0.2833329439163208, -1.2140038013458252)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            uniform token purpose = "guide"
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10132902)
        float3 physics:diagonalInertia = (0.0062246895, 0.0062246895, 0.0062246895)
        float physics:mass = 1.5156189
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, -0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_hip>
            rel physics:body1 = </quadruped_robot/FR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.22430114)
        float3 physics:diagonalInertia = (0.047135003, 0.047135003, 0.009523834)
        float physics:mass = 1.8551292
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, -0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10132902, -0.10132902, -0.26489863), (0.10132902, 0.10132902, 0.26489863)]
            double height = 0.5297972559928894
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2648986279964447)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10132902, -0.10132902, -0.26489863), (0.10132902, 0.10132902, 0.26489863)]
            double height = 0.5297972559928894
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2648986279964447)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_thigh>
            rel physics:body1 = </quadruped_robot/FR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.52979726)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10132902)
        float3 physics:diagonalInertia = (0.004127393, 0.004127393, 0.004127393)
        float physics:mass = 1.0049585
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, -0.2833329439163208, -0.624882161617279)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10132902, -0.10132902, -0.10132902), (0.10132902, 0.10132902, 0.10132902)]
            uniform token purpose = "guide"
            double radius = 0.1013290211558342
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_knee>
            rel physics:body1 = </quadruped_robot/FR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.07667459)
        float3 physics:diagonalInertia = (0.015892757, 0.015892757, 0.004175136)
        float physics:mass = 1.0540549
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, -0.2833329439163208, -0.624882161617279)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08900588, -0.08900588, -0.2945608), (0.08900588, 0.08900588, 0.2945608)]
            double height = 0.5891215801239014
            double radius = 0.08900588005781174
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2945607900619507)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08900588, -0.08900588, -0.2945608), (0.08900588, 0.08900588, 0.2945608)]
            double height = 0.5891215801239014
            uniform token purpose = "guide"
            double radius = 0.08900588005781174
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2945607900619507)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_calf>
            rel physics:body1 = </quadruped_robot/FR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.5891216)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.062304113)
        float3 physics:diagonalInertia = (0.0018420308, 0.0018420308, 0.0018420308)
        float physics:mass = 1.1863244
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.4864318370819092, -0.2833329439163208, -1.2140038013458252)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            uniform token purpose = "guide"
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08811363)
        float3 physics:diagonalInertia = (0.0017935606, 0.0017935606, 0.0017935606)
        float physics:mass = 0.5775238
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, 0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08811363, -0.08811363, -0.08811363), (0.08811363, 0.08811363, 0.08811363)]
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08811363, -0.08811363, -0.08811363), (0.08811363, 0.08811363, 0.08811363)]
            uniform token purpose = "guide"
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_hip>
            rel physics:body1 = </quadruped_robot/RL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.25008056)
        float3 physics:diagonalInertia = (0.004789034, 0.004789034, 0.0019747415)
        float physics:mass = 0.508691
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, 0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08811363, -0.08811363, -0.16986637), (0.08811363, 0.08811363, 0.16986637)]
            double height = 0.33973273634910583
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16986636817455292)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08811363, -0.08811363, -0.16986637), (0.08811363, 0.08811363, 0.16986637)]
            double height = 0.33973273634910583
            uniform token purpose = "guide"
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16986636817455292)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_thigh>
            rel physics:body1 = </quadruped_robot/RL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.33973274)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.105139375)
        float3 physics:diagonalInertia = (0.005484533, 0.005484533, 0.005484533)
        float physics:mass = 1.2403634
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, 0.2833329439163208, -0.4348176419734955)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.105139375, -0.105139375, -0.105139375), (0.105139375, 0.105139375, 0.105139375)]
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.105139375, -0.105139375, -0.105139375), (0.105139375, 0.105139375, 0.105139375)]
            uniform token purpose = "guide"
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_knee>
            rel physics:body1 = </quadruped_robot/RL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.07445885)
        float3 physics:diagonalInertia = (0.022495763, 0.022495763, 0.010628425)
        float physics:mass = 1.9229507
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, 0.2833329439163208, -0.4348176419734955)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.105139375, -0.105139375, -0.21722803), (0.105139375, 0.105139375, 0.21722803)]
            double height = 0.4344560503959656
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2172280251979828)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.105139375, -0.105139375, -0.21722803), (0.105139375, 0.105139375, 0.21722803)]
            double height = 0.4344560503959656
            uniform token purpose = "guide"
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2172280251979828)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_calf>
            rel physics:body1 = </quadruped_robot/RL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.43445605)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.062304113)
        float3 physics:diagonalInertia = (0.0024018604, 0.0024018604, 0.0024018604)
        float physics:mass = 1.5468718
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, 0.2833329439163208, -0.8692736625671387)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            uniform token purpose = "guide"
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.08811363)
        float3 physics:diagonalInertia = (0.0055479696, 0.0055479696, 0.0055479696)
        float physics:mass = 1.786438
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, -0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.08811363, -0.08811363, -0.08811363), (0.08811363, 0.08811363, 0.08811363)]
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.08811363, -0.08811363, -0.08811363), (0.08811363, 0.08811363, 0.08811363)]
            uniform token purpose = "guide"
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_hip>
            rel physics:body1 = </quadruped_robot/RR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.3328885)
        float3 physics:diagonalInertia = (0.0022666065, 0.0022666065, 0.0032583303)
        float physics:mass = 0.839342
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, -0.2833329439163208, -0.09508489817380905)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08811363, -0.08811363, -0.16986637), (0.08811363, 0.08811363, 0.16986637)]
            double height = 0.33973273634910583
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16986636817455292)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.08811363, -0.08811363, -0.16986637), (0.08811363, 0.08811363, 0.16986637)]
            double height = 0.33973273634910583
            uniform token purpose = "guide"
            double radius = 0.08811362832784653
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16986636817455292)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_thigh>
            rel physics:body1 = </quadruped_robot/RR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.33973274)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.105139375)
        float3 physics:diagonalInertia = (0.006010337, 0.006010337, 0.006010337)
        float physics:mass = 1.3592772
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, -0.2833329439163208, -0.4348176419734955)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.105139375, -0.105139375, -0.105139375), (0.105139375, 0.105139375, 0.105139375)]
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.105139375, -0.105139375, -0.105139375), (0.105139375, 0.105139375, 0.105139375)]
            uniform token purpose = "guide"
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_knee>
            rel physics:body1 = </quadruped_robot/RR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.058523234)
        float3 physics:diagonalInertia = (0.014780521, 0.014780521, 0.008090786)
        float physics:mass = 1.4638277
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, -0.2833329439163208, -0.4348176419734955)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.105139375, -0.105139375, -0.21722803), (0.105139375, 0.105139375, 0.21722803)]
            double height = 0.4344560503959656
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2172280251979828)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.105139375, -0.105139375, -0.21722803), (0.105139375, 0.105139375, 0.21722803)]
            double height = 0.4344560503959656
            uniform token purpose = "guide"
            double radius = 0.10513937473297119
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.2172280251979828)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_calf>
            rel physics:body1 = </quadruped_robot/RR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.43445605)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.062304113)
        float3 physics:diagonalInertia = (0.001767662, 0.001767662, 0.001767662)
        float physics:mass = 1.1384286
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.4864318370819092, -0.2833329439163208, -0.8692736625671387)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.062304113, -0.062304113, -0.062304113), (0.062304113, 0.062304113, 0.062304113)]
            uniform token purpose = "guide"
            double radius = 0.06230411306023598
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

