#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
    }
    defaultPrim = "quadruped_robot"
    doc = """Generated from Composed Stage of root layer /home/gpuuser/GitHub/Intelligent-robot-design/generations/generation_2/robot_40.usda
"""
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "quadruped_robot"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
    }

    def Xform "base" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.005)
        float3 physics:diagonalInertia = (0.000016183667, 0.000016183667, 0.000016183667)
        float physics:mass = 0.97102
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physxArticulation:enabledSelfCollisions = 1
        int physxArticulation:solverPositionIterationCount = 32
        int physxArticulation:solverVelocityIterationCount = 1
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "floating_base"
        {
            rel physics:body0 = </quadruped_robot/base>
            rel physics:body1 = </quadruped_robot/trunk>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "trunk" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.076545484)
        float3 physics:diagonalInertia = (0.03350047, 0.03350047, 0.17518814)
        float physics:mass = 1.4692597
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.5432894, -0.25008705, -0.076545484), (0.5432894, 0.25008705, 0.076545484)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1.0865788459777832, 0.5001741051673889, 0.1530909687280655)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5432894, -0.25008705, -0.076545484), (0.5432894, 0.25008705, 0.076545484)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1.0865788459777832, 0.5001741051673889, 0.1530909687280655)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.5432894, 0.25008705, -0.061236385)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "FR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/FR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.5432894, -0.25008705, -0.061236385)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RL_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.5432894, 0.25008705, -0.061236385)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }

        def PhysicsRevoluteJoint "RR_hip_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </quadruped_robot/trunk>
            rel physics:body1 = </quadruped_robot/RR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.5432894, -0.25008705, -0.061236385)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10723816)
        float3 physics:diagonalInertia = (0.007209895, 0.007209895, 0.007209895)
        float physics:mass = 1.5673655
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, 0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_hip>
            rel physics:body1 = </quadruped_robot/FL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.16130081)
        float3 physics:diagonalInertia = (0.020090597, 0.020090597, 0.010003862)
        float physics:mass = 1.7397987
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, 0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10723816, -0.10723816, -0.16130081), (0.10723816, 0.10723816, 0.16130081)]
            double height = 0.3226016163825989
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16130080819129944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10723816, -0.10723816, -0.16130081), (0.10723816, 0.10723816, 0.16130081)]
            double height = 0.3226016163825989
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16130080819129944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_thigh>
            rel physics:body1 = </quadruped_robot/FL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.32260162)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10723816)
        float3 physics:diagonalInertia = (0.0082828, 0.0082828, 0.0082828)
        float physics:mass = 1.8006052
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, 0.25008705258369446, -0.3838379979133606)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FL_knee>
            rel physics:body1 = </quadruped_robot/FL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.24953783)
        float3 physics:diagonalInertia = (0.028827574, 0.028827574, 0.0043758075)
        float physics:mass = 1.2834451
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, 0.25008705258369446, -0.3838379979133606)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.082576305, -0.082576305, -0.24953783), (0.082576305, 0.082576305, 0.24953783)]
            double height = 0.49907565116882324
            double radius = 0.08257630467414856
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24953782558441162)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.082576305, -0.082576305, -0.24953783), (0.082576305, 0.082576305, 0.24953783)]
            double height = 0.49907565116882324
            uniform token purpose = "guide"
            double radius = 0.08257630467414856
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24953782558441162)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FL_calf>
            rel physics:body1 = </quadruped_robot/FL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.49907565)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.057803415)
        float3 physics:diagonalInertia = (0.00080121064, 0.00080121064, 0.00080121064)
        float physics:mass = 0.59948695
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, 0.25008705258369446, -0.8829136490821838)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            uniform token purpose = "guide"
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10723816)
        float3 physics:diagonalInertia = (0.0027622764, 0.0027622764, 0.0027622764)
        float physics:mass = 0.6004937
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, -0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_hip>
            rel physics:body1 = </quadruped_robot/FR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.16130081)
        float3 physics:diagonalInertia = (0.021256546, 0.021256546, 0.010584432)
        float physics:mass = 1.8407671
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, -0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10723816, -0.10723816, -0.16130081), (0.10723816, 0.10723816, 0.16130081)]
            double height = 0.3226016163825989
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16130080819129944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.10723816, -0.10723816, -0.16130081), (0.10723816, 0.10723816, 0.16130081)]
            double height = 0.3226016163825989
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16130080819129944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_thigh>
            rel physics:body1 = </quadruped_robot/FR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.32260162)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.10723816)
        float3 physics:diagonalInertia = (0.0046084854, 0.0046084854, 0.0046084854)
        float physics:mass = 1.0018427
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, -0.25008705258369446, -0.3838379979133606)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.10723816, -0.10723816, -0.10723816), (0.10723816, 0.10723816, 0.10723816)]
            uniform token purpose = "guide"
            double radius = 0.10723815858364105
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "FR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/FR_knee>
            rel physics:body1 = </quadruped_robot/FR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "FR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.24953783)
        float3 physics:diagonalInertia = (0.028639227, 0.028639227, 0.004347218)
        float physics:mass = 1.2750597
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, -0.25008705258369446, -0.3838379979133606)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.082576305, -0.082576305, -0.24953783), (0.082576305, 0.082576305, 0.24953783)]
            double height = 0.49907565116882324
            double radius = 0.08257630467414856
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24953782558441162)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.082576305, -0.082576305, -0.24953783), (0.082576305, 0.082576305, 0.24953783)]
            double height = 0.49907565116882324
            uniform token purpose = "guide"
            double radius = 0.08257630467414856
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24953782558441162)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/FR_calf>
            rel physics:body1 = </quadruped_robot/FR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.49907565)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.057803415)
        float3 physics:diagonalInertia = (0.001984176, 0.001984176, 0.001984176)
        float physics:mass = 1.4846128
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.5432894229888916, -0.25008705258369446, -0.8829136490821838)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            uniform token purpose = "guide"
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RL_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108167335)
        float3 physics:diagonalInertia = (0.007043203, 0.007043203, 0.007043203)
        float physics:mass = 1.5049356
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, 0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_hip>
            rel physics:body1 = </quadruped_robot/RL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.24330735)
        float3 physics:diagonalInertia = (0.04351206, 0.04351206, 0.011234479)
        float physics:mass = 1.9203954
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, 0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108167335, -0.108167335, -0.24330735), (0.108167335, 0.108167335, 0.24330735)]
            double height = 0.4866147041320801
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24330735206604004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108167335, -0.108167335, -0.24330735), (0.108167335, 0.108167335, 0.24330735)]
            double height = 0.4866147041320801
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24330735206604004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_thigh>
            rel physics:body1 = </quadruped_robot/RL_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.4866147)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108167335)
        float3 physics:diagonalInertia = (0.0040647318, 0.0040647318, 0.0040647318)
        float physics:mass = 0.86851966
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, 0.25008705258369446, -0.5478510856628418)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RL_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RL_knee>
            rel physics:body1 = </quadruped_robot/RL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RL_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.16036095)
        float3 physics:diagonalInertia = (0.012174101, 0.012174101, 0.0047036447)
        float physics:mass = 1.1458725
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, 0.25008705258369446, -0.5478510856628418)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.090607494, -0.090607494, -0.16036095), (0.090607494, 0.090607494, 0.16036095)]
            double height = 0.32072189450263977
            double radius = 0.09060749411582947
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16036094725131989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.090607494, -0.090607494, -0.16036095), (0.090607494, 0.090607494, 0.16036095)]
            double height = 0.32072189450263977
            uniform token purpose = "guide"
            double radius = 0.09060749411582947
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16036094725131989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RL_calf>
            rel physics:body1 = </quadruped_robot/RL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.3207219)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.057803415)
        float3 physics:diagonalInertia = (0.001142536, 0.001142536, 0.001142536)
        float physics:mass = 0.8548756
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, 0.25008705258369446, -0.8685729503631592)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            uniform token purpose = "guide"
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RR_hip" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108167335)
        float3 physics:diagonalInertia = (0.005632151, 0.005632151, 0.005632151)
        float physics:mass = 1.2034333
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, -0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_thigh_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_hip>
            rel physics:body1 = </quadruped_robot/RR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.24330735)
        float3 physics:diagonalInertia = (0.038712475, 0.038712475, 0.009995263)
        float physics:mass = 1.7085667
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, -0.25008705258369446, -0.06123638525605202)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108167335, -0.108167335, -0.24330735), (0.108167335, 0.108167335, 0.24330735)]
            double height = 0.4866147041320801
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24330735206604004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.108167335, -0.108167335, -0.24330735), (0.108167335, 0.108167335, 0.24330735)]
            double height = 0.4866147041320801
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.24330735206604004)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_knee_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_thigh>
            rel physics:body1 = </quadruped_robot/RR_knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.4866147)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_knee" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.108167335)
        float3 physics:diagonalInertia = (0.0037550824, 0.0037550824, 0.0037550824)
        float physics:mass = 0.8023562
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, -0.25008705258369446, -0.5478510856628418)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.108167335, -0.108167335, -0.108167335), (0.108167335, 0.108167335, 0.108167335)]
            uniform token purpose = "guide"
            double radius = 0.10816733539104462
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RR_calf_joint" (
            apiSchemas = ["PhysxJointAPI", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = 60
            float drive:angular:physics:stiffness = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </quadruped_robot/RR_knee>
            rel physics:body1 = </quadruped_robot/RR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -180
            float physics:upperLimit = 180
            float physxJoint:maxJointVelocity = 3002.2988
        }
    }

    def Xform "RR_calf" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.16036095)
        float3 physics:diagonalInertia = (0.009026038, 0.009026038, 0.0034873441)
        float physics:mass = 0.84956497
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, -0.25008705258369446, -0.5478510856628418)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "visuals"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.090607494, -0.090607494, -0.16036095), (0.090607494, 0.090607494, 0.16036095)]
            double height = 0.32072189450263977
            double radius = 0.09060749411582947
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16036094725131989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.090607494, -0.090607494, -0.16036095), (0.090607494, 0.090607494, 0.16036095)]
            double height = 0.32072189450263977
            uniform token purpose = "guide"
            double radius = 0.09060749411582947
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, -0.16036094725131989)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_foot_joint"
        {
            rel physics:body0 = </quadruped_robot/RR_calf>
            rel physics:body1 = </quadruped_robot/RR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.3207219)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.057803415)
        float3 physics:diagonalInertia = (0.0007120103, 0.0007120103, 0.0007120103)
        float physics:mass = 0.5327449
        quatf physics:principalAxes = (1, 0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.5432894229888916, -0.25008705258369446, -0.8685729503631592)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.057803415, -0.057803415, -0.057803415), (0.057803415, 0.057803415, 0.057803415)]
            uniform token purpose = "guide"
            double radius = 0.05780341476202011
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

